{"file":"smoothly-option.entry.esm.js","mappings":";;AAAA,MAAM,QAAQ,GAAG,wjBAAwjB;;MCC5jB,cAAc;EACzB;;;;IACE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;GACtB;EACD,OAAO,CAAC,KAAK;IACX,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;GAC/D;EACD,QAAQ,CAAC,KAAK;IACZ,IAAI,IAAI,CAAC,KAAK;MACZ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;MAE/D,MAAM,mBAAmB,IAAI,CAAC,OAAO,CAAC,SAAS,yDAAyD,CAAC;GAC5G;EACD,MAAM;IACJ,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAC3F,CAAC,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAC3B,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EACxC,CAAC,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE;GAClC;;;;;;;","names":[],"sources":["./node_modules/smoothly/dist/collection/components/option/style.css?tag=smoothly-option&encapsulation=shadow","./node_modules/smoothly/dist/collection/components/option/index.js"],"sourcesContent":[":host {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 0.7em 1em;\n  margin-left: 1px;\n  margin-right: 1px;\n  background-color: transparent;\n  position: relative;\n}\n\n:host([data-highlight]) {\n  background-color: rgb(var(--smoothly-default-shade));\n}\n\n:host > div.middle {\n  padding-left: 0.5em;\n  flex-shrink: 1;\n  width: 100%;\n}\n\n:host([divider]) {\n  margin-bottom: 0.5em;\n}\n\n::slotted([slot=right]) {\n  font-style: italic;\n  white-space: nowrap;\n}\n\n:host([divider])::after {\n  position: absolute;\n  height: 1px;\n  width: 100%;\n  left: 0;\n  bottom: -0.25em;\n  content: \"\";\n  background-color: rgba(var(--smoothly-dark-color));\n}","import { Component, Element, Event, h, Host, Prop } from \"@stencil/core\";\nexport class SmoothlyOption {\n  constructor() {\n    this.dataHighlight = false;\n    this.divider = false;\n  }\n  onHover(event) {\n    this.optionHover.emit({ name: this.name, value: this.value });\n  }\n  onSelect(event) {\n    if (this.value)\n      this.optionSelect.emit({ name: this.name, value: this.value });\n    else\n      throw `smoothly-option ${this.element.innerHTML} lacks value-property and can therefore not be selected`;\n  }\n  render() {\n    return (h(Host, { onMouseDown: (e) => this.onSelect(e), onMouseOver: (e) => this.onHover(e) },\n      h(\"slot\", { name: \"left\" }),\n      h(\"div\", { class: \"middle\" }, this.name),\n      h(\"slot\", { name: \"right\" })));\n  }\n  static get is() { return \"smoothly-option\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() { return {\n    \"$\": [\"style.scss\"]\n  }; }\n  static get styleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get properties() { return {\n    \"aliases\": {\n      \"type\": \"string\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"string\",\n        \"resolved\": \"string\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"aliases\",\n      \"reflect\": true\n    },\n    \"dataHighlight\": {\n      \"type\": \"boolean\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"data-highlight\",\n      \"reflect\": true,\n      \"defaultValue\": \"false\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"string\",\n        \"resolved\": \"string\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"name\",\n      \"reflect\": true\n    },\n    \"value\": {\n      \"type\": \"string\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"string\",\n        \"resolved\": \"string\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"value\",\n      \"reflect\": true\n    },\n    \"divider\": {\n      \"type\": \"boolean\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean | undefined\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"divider\",\n      \"reflect\": true,\n      \"defaultValue\": \"false\"\n    }\n  }; }\n  static get events() { return [{\n      \"method\": \"optionHover\",\n      \"name\": \"optionHover\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"{ value: any; name: string }\",\n        \"resolved\": \"{ value: any; name: string; }\",\n        \"references\": {}\n      }\n    }, {\n      \"method\": \"optionSelect\",\n      \"name\": \"optionSelect\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"{ value: any; name: string }\",\n        \"resolved\": \"{ value: any; name: string; }\",\n        \"references\": {}\n      }\n    }]; }\n  static get elementRef() { return \"element\"; }\n}\n"],"version":3}