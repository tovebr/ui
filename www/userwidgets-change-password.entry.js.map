{"file":"userwidgets-change-password.entry.esm.js","mappings":";;;;;;;;;;AAAA,MAAM,QAAQ,GAAG,EAAE;;MCYN,cAAc;;;;;EAG1B,MAAM,iBAAiB;IACtB,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAA;GACnD;EAED,MAAM,YAAY,CAAC,KAAgE;IAClF,KAAK,CAAC,cAAc,EAAE,CAAA;IACtB,KAAK,CAAC,eAAe,EAAE,CAAA;IACvB,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAyB,CAAC,CAAC,CAAA;IACnF,IAAI,CAACA,IAAsB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC;MACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAA;SAC9C,IAAI,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,MAAM;MACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,0CAA0C,CAAC,CAAC,CAAA;SACvE;MACJ,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,OAAO,CAAA;MAChC,IAAI,GAAG,EAAE;QACR,IAAI,CAAC,MAAM,CAAC,IAAI,CACf,MAAM,CAAC,OAAO,CAAC,oBAAoB,EAAE;UACpC,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;UACvE,OAAOC,KAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,4BAA4B,CAAC,GAAG,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAA;SACtG,CAAC,CACF,CAAA;OACD;KACD;GACD;EACD,MAAM;;IACL,QACC,6CAC0B,gBAAO,MAAA,IAAI,CAAC,GAAG,0CAAE,KAAK,CAAQ,EACvD,sBAAgB,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,UAAU,mBAEzB,EACjB,sBAAgB,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,UAAU,mBAEzB,EACjB,sBAAgB,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,UAAU,sBAE5B,EACjB,6CAAkD,CAC5C,EACP;GACD;;;;;;","names":["model.userwidgets.User","gracely.Error"],"sources":["./src/components/user/change-password/style.css?tag=userwidgets-change-password&encapsulation=scoped","./src/components/user/change-password/index.tsx"],"sourcesContent":["","import { Component, Event, EventEmitter, h, Listen, State } from \"@stencil/core\"\nimport * as gracely from \"gracely\"\nimport { Notice } from \"smoothly\"\nimport { client } from \"../../../client\"\nimport { model } from \"../../../model\"\nimport { store } from \"../../../Store\"\n\n@Component({\n\ttag: \"userwidgets-change-password\",\n\tstyleUrl: \"style.css\",\n\tscoped: true,\n})\nexport class ChangePassword {\n\t@State() key?: model.userwidgets.User.Key\n\t@Event() notice: EventEmitter<Notice>\n\tasync componentWillLoad(): Promise<void> {\n\t\tstore.me.listen(\"changed\", key => (this.key = key))\n\t}\n\t@Listen(\"submit\")\n\tasync handleSubmit(event: CustomEvent<{ old: string; new: string; repeat: string }>) {\n\t\tevent.preventDefault()\n\t\tevent.stopPropagation()\n\t\tconst passwords = Object.fromEntries(new FormData(event.target as HTMLFormElement))\n\t\tif (!model.userwidgets.User.Password.Change.is(passwords))\n\t\t\tthis.notice.emit(Notice.failed(\"Missing fields.\"))\n\t\telse if (passwords.new != passwords.repeat)\n\t\t\tthis.notice.emit(Notice.failed(\"New password was not repeated correctly.\"))\n\t\telse {\n\t\t\tconst key = await client.fullKey\n\t\t\tif (key) {\n\t\t\t\tthis.notice.emit(\n\t\t\t\t\tNotice.execute(\"Changing password.\", async () => {\n\t\t\t\t\t\tconst response = await client.user.changePassword(key.email, passwords)\n\t\t\t\t\t\treturn gracely.Error.is(response) ? [false, \"Failed to change password.\"] : [true, \"Password changed\"]\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<form>\n\t\t\t\tChange password for user <code>{this.key?.email}</code>\n\t\t\t\t<smoothly-input name=\"old\" type=\"password\">\n\t\t\t\t\tOld password\n\t\t\t\t</smoothly-input>\n\t\t\t\t<smoothly-input name=\"new\" type=\"password\">\n\t\t\t\t\tNew password\n\t\t\t\t</smoothly-input>\n\t\t\t\t<smoothly-input name=\"repeat\" type=\"password\">\n\t\t\t\t\tRepeat password\n\t\t\t\t</smoothly-input>\n\t\t\t\t<smoothly-submit>Change password</smoothly-submit>\n\t\t\t</form>\n\t\t)\n\t}\n}\n"],"version":3}