{"file":"smoothly-submit.entry.esm.js","mappings":";;AAAA,MAAM,QAAQ,GAAG,y5BAAy5B;;MCC75B,cAAc;EACzB;;;IACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;GACvB;EACD,IAAI,IAAI;IACN,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC;GACvD;EACD,MAAM,YAAY,CAAC,KAAK;IACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;MACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;MACvB,IAAI,IAAI,CAAC,OAAO;QACd,KAAK,CAAC,cAAc,EAAE,CAAC;MACzB,MAAM,MAAM,GAAG,EAAE,CAAC;MAClB,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UACxC,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;UACjC,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI;YAC1C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;SACxC;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QACxE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UAC9C,MAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;UACvC,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI;YAC1C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;SACxC;OACF;MACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;MAC9B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;GACF;EACD,MAAM,MAAM;IACV,IAAI,MAAM,CAAC;IACX,KAAK,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI;MACvB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,OAAO,MAAM,CAAC;GACf;EACD,MAAM;IACJ,OAAO;MACL,CAAC,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC;MAClD,CAAC,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO,MAAM,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,EAAE,EACnH,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KACnB,CAAC;GACH;;AA2KH,SAAS,eAAe,CAAC,OAAO;EAC9B,QAAQ,OAAO,OAAO,CAAC,IAAI,IAAI,QAAQ,IAAI,OAAO,OAAO,CAAC,KAAK,IAAI,QAAQ,EAAE;AAC/E,CAAC;;;;;","names":[],"sources":["./node_modules/smoothly/dist/collection/components/submit/style.css?tag=smoothly-submit&encapsulation=scoped","./node_modules/smoothly/dist/collection/components/submit/index.js"],"sourcesContent":[":host {\n\tdisplay: block;\n\tborder-width: 1px;\n\tborder-style: solid;\n\tborder-radius: 3px;\n}\n:host[hidden] {\n\tdisplay: none;\n}\n:host[disabled] {\n\topacity: 0.5;\n}\nbutton {\n\tpadding: 0.2em 0.3em;\n\tfont-size: 110%;\n\tfont-weight: 400;\n}\n:host[processing] {\n\tborder-color: rgb(var(--smoothly-light-color));\n}\n:host[processing] > button {\n\tcolor: rgb(var(--smoothly-light-contrast));\n\tbackground: rgb(var(--smoothly-light-color));\n}\n:host:not([processing]):not([disabled]):hover,\n:host:not([processing]):not([disabled]):focus,\n:host:not([processing]):not([disabled]):active {\n\tborder-color: rgb(var(--smoothly-submit-border));\n}\n:host[expand=fill] > button,\n:host[expand=block] > button {\n\twidth: 100%;\n}\n:host[expand=fill] {\n\tborder-left: none;\n\tborder-right: none;\n}\n","import { Component, Event, h, Listen, Method, Prop } from \"@stencil/core\";\nexport class SmoothlySubmit {\n  constructor() {\n    this.disabled = false;\n  }\n  get form() {\n    return (this.button && this.button.form) || undefined;\n  }\n  async handleSubmit(event) {\n    if (!this.processing) {\n      this.processing = true;\n      if (this.prevent)\n        event.preventDefault();\n      const result = {};\n      if (this.form) {\n        const elements = this.form.elements;\n        for (let i = 0; i < elements.length; i++) {\n          const element = elements.item(i);\n          if (hasNameAndValue(element) && element.name)\n            result[element.name] = element.value;\n        }\n        const smoothlyInputs = this.form.getElementsByTagName(\"smoothly-input\");\n        for (let i = 0; i < smoothlyInputs.length; i++) {\n          const element = smoothlyInputs.item(i);\n          if (hasNameAndValue(element) && element.name)\n            result[element.name] = element.value;\n        }\n      }\n      this.submitEvent.emit(result);\n      this.processing = false;\n    }\n  }\n  async submit() {\n    let result;\n    if ((result = !!this.form))\n      this.form.submit();\n    return result;\n  }\n  render() {\n    return [\n      h(\"smoothly-spinner\", { active: this.processing }),\n      h(\"button\", { type: \"submit\", disabled: this.disabled || this.processing, ref: (element) => (this.button = element) },\n        h(\"slot\", null)),\n    ];\n  }\n  static get is() { return \"smoothly-submit\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get styleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get properties() { return {\n    \"processing\": {\n      \"type\": \"boolean\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"processing\",\n      \"reflect\": true\n    },\n    \"color\": {\n      \"type\": \"string\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"Color\",\n        \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"default\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | undefined\",\n        \"references\": {\n          \"Color\": {\n            \"location\": \"import\",\n            \"path\": \"../../model\"\n          }\n        }\n      },\n      \"required\": false,\n      \"optional\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"color\",\n      \"reflect\": true\n    },\n    \"expand\": {\n      \"type\": \"string\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"Expand\",\n        \"resolved\": \"\\\"block\\\" | \\\"full\\\" | undefined\",\n        \"references\": {\n          \"Expand\": {\n            \"location\": \"import\",\n            \"path\": \"../../model\"\n          }\n        }\n      },\n      \"required\": false,\n      \"optional\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"expand\",\n      \"reflect\": true\n    },\n    \"fill\": {\n      \"type\": \"string\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"Fill\",\n        \"resolved\": \"\\\"clear\\\" | \\\"default\\\" | \\\"outline\\\" | \\\"solid\\\" | undefined\",\n        \"references\": {\n          \"Fill\": {\n            \"location\": \"import\",\n            \"path\": \"../../model\"\n          }\n        }\n      },\n      \"required\": false,\n      \"optional\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"fill\",\n      \"reflect\": true\n    },\n    \"disabled\": {\n      \"type\": \"boolean\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"disabled\",\n      \"reflect\": true,\n      \"defaultValue\": \"false\"\n    },\n    \"prevent\": {\n      \"type\": \"boolean\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean | undefined\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"prevent\",\n      \"reflect\": false\n    }\n  }; }\n  static get events() { return [{\n      \"method\": \"submitEvent\",\n      \"name\": \"submit\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"{ [key: string]: string }\",\n        \"resolved\": \"{ [key: string]: string; }\",\n        \"references\": {}\n      }\n    }]; }\n  static get methods() { return {\n    \"submit\": {\n      \"complexType\": {\n        \"signature\": \"() => Promise<boolean>\",\n        \"parameters\": [],\n        \"references\": {\n          \"Promise\": {\n            \"location\": \"global\"\n          }\n        },\n        \"return\": \"Promise<boolean>\"\n      },\n      \"docs\": {\n        \"text\": \"\",\n        \"tags\": []\n      }\n    }\n  }; }\n  static get listeners() { return [{\n      \"name\": \"click\",\n      \"method\": \"handleSubmit\",\n      \"target\": undefined,\n      \"capture\": false,\n      \"passive\": false\n    }]; }\n}\nfunction hasNameAndValue(element) {\n  return (typeof element.name == \"string\" && typeof element.value == \"string\");\n}\n"],"version":3}