{"file":"smoothly-table-expandable-cell.entry.esm.js","mappings":";;AAAA,MAAM,QAAQ,GAAG,6HAA6H;;MCCjI,mBAAmB;EAC9B;;;;IACE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;GACrB;EACD,WAAW,CAAC,KAAK;IACf,IAAI,IAAI,CAAC,gBAAgB;MACvB,IAAI,KAAK;QACP,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAEtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;GAChD;EACD,OAAO;IACL,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;GACxB;EACD,gBAAgB;IACd,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;GAC7B;EACD,kBAAkB;IAChB,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;MACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAChD;GACF;EACD,MAAM;IACJ,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAClD,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EACf,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,EAAE,EAC/C,CAAC,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,EAAE,EAAE,EACvD,CAAC,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;GACzC;;;;;;;;;;","names":[],"sources":["./node_modules/smoothly/dist/collection/components/table/expandable/cell/style.css?tag=smoothly-table-expandable-cell&encapsulation=scoped","./node_modules/smoothly/dist/collection/components/table/expandable/cell/index.js"],"sourcesContent":[":host {\n\tdisplay: table-cell;\n\tpadding: 0.5em;\n}\n.hide {\n\tdisplay: none;\n}\n","import { Component, Element, Event, h, Host, Listen, Prop, State, Watch, } from \"@stencil/core\";\nexport class TableExpandableCell {\n  constructor() {\n    this.align = \"left\";\n  }\n  openChanged(value) {\n    if (this.expansionElement)\n      if (value)\n        this.beginOpen = true;\n      else\n        this.element.append(this.expansionElement);\n  }\n  onClick() {\n    this.open = !this.open;\n  }\n  componentDidLoad() {\n    this.expansionLoaded.emit();\n  }\n  componentDidRender() {\n    if (this.beginOpen) {\n      this.beginOpen = false;\n      this.expansionOpen.emit(this.expansionElement);\n    }\n  }\n  render() {\n    return (h(Host, { style: { textAlign: this.align } },\n      h(\"slot\", null),\n      h(\"tr\", { ref: e => (this.expansionElement = e) },\n        h(\"td\", { colSpan: 500, class: !this.open ? \"hide\" : \"\" },\n          h(\"slot\", { name: \"detail\" })))));\n  }\n  static get is() { return \"smoothly-table-expandable-cell\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get styleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get properties() { return {\n    \"align\": {\n      \"type\": \"string\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"\\\"left\\\" | \\\"center\\\" | \\\"right\\\"\",\n        \"resolved\": \"\\\"center\\\" | \\\"left\\\" | \\\"right\\\"\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"align\",\n      \"reflect\": false,\n      \"defaultValue\": \"\\\"left\\\"\"\n    },\n    \"open\": {\n      \"type\": \"boolean\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"open\",\n      \"reflect\": true\n    }\n  }; }\n  static get states() { return {\n    \"beginOpen\": {}\n  }; }\n  static get events() { return [{\n      \"method\": \"expansionOpen\",\n      \"name\": \"expansionOpen\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"HTMLElement\",\n        \"resolved\": \"HTMLElement\",\n        \"references\": {\n          \"HTMLElement\": {\n            \"location\": \"global\"\n          }\n        }\n      }\n    }, {\n      \"method\": \"expansionLoaded\",\n      \"name\": \"expansionLoaded\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"void\",\n        \"resolved\": \"void\",\n        \"references\": {}\n      }\n    }]; }\n  static get elementRef() { return \"element\"; }\n  static get watchers() { return [{\n      \"propName\": \"open\",\n      \"methodName\": \"openChanged\"\n    }]; }\n  static get listeners() { return [{\n      \"name\": \"click\",\n      \"method\": \"onClick\",\n      \"target\": undefined,\n      \"capture\": false,\n      \"passive\": false\n    }]; }\n}\n"],"version":3}