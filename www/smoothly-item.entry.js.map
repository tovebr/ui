{"file":"smoothly-item.entry.esm.js","mappings":";;AAAA,MAAM,QAAQ,GAAG,8bAA8b;;MCClc,IAAI;;;;;EACf,iBAAiB,CAAC,KAAK,EAAE,GAAG;IAC1B,IAAI,KAAK,IAAI,CAAC,GAAG;MACf,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;GAC5B;EACD,OAAO;IACL,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;GAC1B;EACD,gBAAgB;IACd,IAAI,IAAI,CAAC,QAAQ;MACf,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;GAC5B;EACD,MAAM,MAAM,CAAC,MAAM;IACjB,MAAM,MAAM,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM;QACzC,EAAE,CAAC,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC3G,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtD,KAAK,CAAC,CAAC;IACX,OAAO,MAAM,CAAC;GACf;EACD,MAAM;IACJ,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;GACxB;;;;;;;;;;","names":[],"sources":["./node_modules/smoothly/dist/collection/components/item/style.css?tag=smoothly-item&encapsulation=scoped","./node_modules/smoothly/dist/collection/components/item/index.js"],"sourcesContent":[":host([selected]) {\n\tbackground-color: rgb(var(--smoothly-primary-shade));\n\tcolor: rgb(var(--smoothly-primary-contrast));\n}\n:host {\n\tpadding: .5em;\n\tcursor: pointer;\n\tbackground-color: rgb(var(--smoothly-default-shade));\n\tcolor: rgb(var(--smoothly-default-contrast));\n\tborder: rgb(var(--smoothly-default-shade) solid 1px)\n}\n:host:hover {\n\tbackground-color: rgb(var(--smoothly-primary-color));\n\tcolor: rgb(var(--smoothly-primary-contrast));\n}\n\n","import { Component, Element, Event, h, Listen, Method, Prop, Watch } from \"@stencil/core\";\nexport class Item {\n  onSelectedChanged(value, old) {\n    if (value && !old)\n      this.itemSelected.emit();\n  }\n  onClick() {\n    this.selected = true;\n    this.itemSelected.emit();\n  }\n  componentDidLoad() {\n    if (this.selected)\n      this.itemSelected.emit();\n  }\n  async filter(filter) {\n    const result = !(this.element.hidden = filter\n      ? !((typeof this.value === \"string\" ? this.value : JSON.stringify(this.value)).toLowerCase().includes(filter) ||\n        this.element.innerText.toLowerCase().includes(filter))\n      : false);\n    return result;\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  static get is() { return \"smoothly-item\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get styleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get properties() { return {\n    \"value\": {\n      \"type\": \"any\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"any\",\n        \"resolved\": \"any\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"value\",\n      \"reflect\": false\n    },\n    \"selected\": {\n      \"type\": \"boolean\",\n      \"mutable\": true,\n      \"complexType\": {\n        \"original\": \"boolean\",\n        \"resolved\": \"boolean\",\n        \"references\": {}\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"attribute\": \"selected\",\n      \"reflect\": true\n    }\n  }; }\n  static get events() { return [{\n      \"method\": \"itemSelected\",\n      \"name\": \"itemSelected\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"void\",\n        \"resolved\": \"void\",\n        \"references\": {}\n      }\n    }]; }\n  static get methods() { return {\n    \"filter\": {\n      \"complexType\": {\n        \"signature\": \"(filter: string) => Promise<boolean>\",\n        \"parameters\": [{\n            \"tags\": [],\n            \"text\": \"\"\n          }],\n        \"references\": {\n          \"Promise\": {\n            \"location\": \"global\"\n          }\n        },\n        \"return\": \"Promise<boolean>\"\n      },\n      \"docs\": {\n        \"text\": \"\",\n        \"tags\": []\n      }\n    }\n  }; }\n  static get elementRef() { return \"element\"; }\n  static get watchers() { return [{\n      \"propName\": \"selected\",\n      \"methodName\": \"onSelectedChanged\"\n    }]; }\n  static get listeners() { return [{\n      \"name\": \"click\",\n      \"method\": \"onClick\",\n      \"target\": undefined,\n      \"capture\": false,\n      \"passive\": false\n    }]; }\n}\n"],"version":3}