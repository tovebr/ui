{"file":"smoothly-notification.entry.esm.js","mappings":";;AAAA,MAAM,QAAQ,GAAG,qPAAqP;;MCCzP,YAAY;EACvB;;;IACE,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACf,IAAI,CAAC,QAAQ,GAAG,MAAM;MACpB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;MACjC,IAAI,MAAM,CAAC,KAAK,IAAI,QAAQ;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;QAEzB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;KAClB,CAAC;GACH;EACD,IAAI,KAAK;IACP,IAAI,MAAM,CAAC;IACX,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK;MACvB,KAAK,SAAS,CAAC;MACf,KAAK,SAAS;QACZ,MAAM,GAAG,SAAS,CAAC;QACnB,MAAM;MACR,KAAK,SAAS;QACZ,MAAM,GAAG,SAAS,CAAC;QACnB,MAAM;MACR,KAAK,WAAW;QACd,MAAM,GAAG,OAAO,CAAC;QACjB,MAAM;MACR,KAAK,QAAQ;QACX,MAAM,GAAG,QAAQ,CAAC;QAClB,MAAM;MACR;QACE,MAAM,GAAG,OAAO,CAAC;QACjB,MAAM;KACT;IACD,OAAO,MAAM,CAAC;GACf;EACD,SAAS,CAAC,KAAK;IACb,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,OAAO,EAAE;MAChC,KAAK,CAAC,eAAe,EAAE,CAAC;MACxB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;KACrB;GACF;EACD,eAAe,CAAC,QAAQ,EAAE,QAAQ;IAChC,IAAI,QAAQ;MACV,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAChC;EACD,gBAAgB;IACd,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GACnC;EACD,MAAM;IACJ,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAClD,CAAC,CAAC,kBAAkB,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,EACpD,CAAC,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC,CAAC,EACvD,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE;GACvC;;;;;;;;;","names":[],"sources":["./node_modules/smoothly/dist/collection/components/notification/style.css?tag=smoothly-notification&encapsulation=scoped","./node_modules/smoothly/dist/collection/components/notification/index.js"],"sourcesContent":[":host {\n\tdisplay: block;\n\tmin-width: 32.6%;\n\tmin-height: 3em;\n\tborder-radius: 5px;\n\tmargin: 0.5em;\n}\n:host[hidden] {\n\tdisplay: none;\n}\nsmoothly-trigger {\n\tfloat: right;\n\ttext-align: right;\n\tmargin-right: 0.2em;\n}\n","import { Component, Event, h, Host, Listen, Prop, State, Watch } from \"@stencil/core\";\nexport class Notification {\n  constructor() {\n    this.tick = {};\n    this.listener = notice => {\n      console.log(\"changed: \", notice);\n      if (notice.state == \"closed\")\n        this.remove.emit(notice);\n      else\n        this.tick = {};\n    };\n  }\n  get color() {\n    let result;\n    switch (this.notice.state) {\n      case \"delayed\":\n      case \"warning\":\n        result = \"warning\";\n        break;\n      case \"success\":\n        result = \"success\";\n        break;\n      case \"executing\":\n        result = \"light\";\n        break;\n      case \"failed\":\n        result = \"danger\";\n        break;\n      default:\n        result = \"light\";\n        break;\n    }\n    return result;\n  }\n  onTrigger(event) {\n    if (event.detail.name == \"close\") {\n      event.stopPropagation();\n      this.notice.close();\n    }\n  }\n  onUpdatedNotice(newValue, oldValue) {\n    if (oldValue)\n      oldValue.unlisten(this.listener);\n    newValue.listen(this.listener);\n  }\n  componentDidLoad() {\n    this.onUpdatedNotice(this.notice);\n  }\n  render() {\n    return (h(Host, { color: this.color, fill: \"solid\" },\n      h(\"smoothly-trigger\", { fill: \"clear\", name: \"close\" },\n        h(\"smoothly-icon\", { name: \"close-circle-outline\" })),\n      h(\"p\", null, this.notice.message)));\n  }\n  static get is() { return \"smoothly-notification\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get styleUrls() { return {\n    \"$\": [\"style.css\"]\n  }; }\n  static get properties() { return {\n    \"notice\": {\n      \"type\": \"unknown\",\n      \"mutable\": false,\n      \"complexType\": {\n        \"original\": \"Notice\",\n        \"resolved\": \"Notice\",\n        \"references\": {\n          \"Notice\": {\n            \"location\": \"import\",\n            \"path\": \"../../model\"\n          }\n        }\n      },\n      \"required\": false,\n      \"optional\": false,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      }\n    }\n  }; }\n  static get states() { return {\n    \"tick\": {}\n  }; }\n  static get events() { return [{\n      \"method\": \"remove\",\n      \"name\": \"remove\",\n      \"bubbles\": true,\n      \"cancelable\": true,\n      \"composed\": true,\n      \"docs\": {\n        \"tags\": [],\n        \"text\": \"\"\n      },\n      \"complexType\": {\n        \"original\": \"Notice\",\n        \"resolved\": \"Notice\",\n        \"references\": {\n          \"Notice\": {\n            \"location\": \"import\",\n            \"path\": \"../../model\"\n          }\n        }\n      }\n    }]; }\n  static get watchers() { return [{\n      \"propName\": \"notice\",\n      \"methodName\": \"onUpdatedNotice\"\n    }]; }\n  static get listeners() { return [{\n      \"name\": \"trigger\",\n      \"method\": \"onTrigger\",\n      \"target\": undefined,\n      \"capture\": false,\n      \"passive\": false\n    }]; }\n}\n"],"version":3}